rf_misclass_rate[i] <- 1-sum(diag(rf_error))/sum(rf_error)
log_auc[i] <- auc(roc(log_predicted_class, test_y))
rf_auc[i] <- auc(roc(rf_predicted_class,test_y))
}
log_sorted_indices <- order(-pred_logitmod)
us_stroke = 795000/332915073
prevelance = round((nrow(test))*us_stroke)
log_top_prob <- pred_logitmod[log_sorted_indices[1:prevelance]]
print(paste("The highest probability of stroke patient using GLM is", paste(log_top_prob, collapse = " and ")))
rf_prob <- data.frame(rf_model$test$votes)
rf_prob <- rf_prob$X1
rf_sorted_indices <- order(-rf_prob)
rf_top_prob <- rf_prob[rf_sorted_indices[1:prevelance]]
print(paste("The highest probability of stroke patient using RF is", paste(rf_top_prob, collapse = " and ")))
rf_stroke_pred <- sum(rf_predicted_class == 1)
rf_prev_comparison = c(rf_stroke_pred,prevelance)
log_stroke_pred <- sum(log_predicted_class == 1)
log_prev_comparison = c(log_stroke_pred, prevelance)
print(paste("The number of predicted stroke using RF vs prevalence of stroke in test set is", paste(rf_prev_comparison, collapse = " vs ")))
print(paste("The number of predicted stroke using GLM vs prevalence of stroke in test set is", paste(log_prev_comparison, collapse = " vs ")))
reduced_log <- stepAIC(logitmodel, direction = "both")
r_log_pred <- predict(reduced_log, newdata = test, type = "response")
r_log_pred_class <- ifelse(r_log_pred > 0.5, 1,0)
length(r_log_pred_class[r_log_pred_class == "1"])
r_log_auc <- auc(roc(r_log_pred_class,test_y))
install.packages("formatR")
bmi_1 <- density(train$bmi[which(train$stroke=='1')])
bmi_0 <- density(train$bmi[which(train$stroke=='0')])
par(mfrow=c(1,2), cex.axis=1.5,cex.lab=1.7)
plot(bmi_1, xlim=range(bmi_1$x,bmi_0$x), ylim=range(bmi_1$y,bmi_0$y), col = "red",
main = "Density Plot for BMI on Stroke Status",
xlab = "BMI", lwd=2)
lines(bmi_0, col = "grey", lwd= 2, lty = 2)
legend("topleft", legend=c("stroke = 1", "stroke = 0"), lty = c(1,2),
col = c("red", "grey"), lwd=2, cex=1.2)
bmi_1 <- density(train$bmi[which(train$stroke=='1')])
bmi_0 <- density(train$bmi[which(train$stroke=='0')])
par(mfrow=c(1,2))
plot(bmi_1, xlim=range(bmi_1$x,bmi_0$x), ylim=range(bmi_1$y,bmi_0$y), col = "red",
main = "Density Plot for BMI on Stroke Status",
xlab = "BMI", lwd=2)
lines(bmi_0, col = "grey", lwd= 2, lty = 2)
legend("topleft", legend=c("stroke = 1", "stroke = 0"), lty = c(1,2),
col = c("red", "grey"), lwd=2, cex=1.2)
bmi_1 <- density(train$bmi[which(train$stroke=='1')])
bmi_0 <- density(train$bmi[which(train$stroke=='0')])
par(mfrow=c(1,2), cex.axis=1.5,cex.lab=1.7)
plot(bmi_1, xlim=range(bmi_1$x,bmi_0$x), ylim=range(bmi_1$y,bmi_0$y), col = "red",
main = "Density Plot for BMI on Stroke Status",
xlab = "BMI", lwd=2)
lines(bmi_0, col = "grey", lwd= 2, lty = 2)
legend("topleft", legend=c("stroke = 1", "stroke = 0"), lty = c(1,2),
col = c("red", "grey"), lwd=2, cex=1.2)
bmi_1 <- density(train$bmi[which(train$stroke=='1')])
bmi_0 <- density(train$bmi[which(train$stroke=='0')])
par(mfrow=c(1,2))
plot(bmi_1, xlim=range(bmi_1$x,bmi_0$x), ylim=range(bmi_1$y,bmi_0$y), col = "red",
main = "Density Plot for BMI on Stroke Status",
xlab = "BMI", lwd=2)
lines(bmi_0, col = "grey", lwd= 2, lty = 2)
legend("topleft", legend=c("stroke = 1", "stroke = 0"), lty = c(1,2),
col = c("red", "grey"), lwd=2, cex=1.2)
bmi_1 <- density(train$bmi[which(train$stroke=='1')])
bmi_0 <- density(train$bmi[which(train$stroke=='0')])
#par(mfrow=c(1,2))
plot(bmi_1, xlim=range(bmi_1$x,bmi_0$x), ylim=range(bmi_1$y,bmi_0$y), col = "red",
main = "Density Plot for BMI on Stroke Status",
xlab = "BMI", lwd=2)
lines(bmi_0, col = "grey", lwd= 2, lty = 2)
legend("topleft", legend=c("stroke = 1", "stroke = 0"), lty = c(1,2),
col = c("red", "grey"), lwd=2, cex=1.2)
bmi_1 <- density(train$bmi[which(train$stroke=='1')])
bmi_0 <- density(train$bmi[which(train$stroke=='0')])
par(mfrow=c(1,2))
plot(bmi_1, xlim=range(bmi_1$x,bmi_0$x), ylim=range(bmi_1$y,bmi_0$y), col = "red",
main = "Density Plot for BMI on Stroke Status",
xlab = "BMI", lwd=2)
lines(bmi_0, col = "grey", lwd= 2, lty = 2)
legend("topleft", legend=c("stroke = 1", "stroke = 0"), lty = c(1,2),
col = c("red", "grey"), lwd=2, cex=1.2)
bmi_1 <- density(train$bmi[which(train$stroke=='1')])
bmi_0 <- density(train$bmi[which(train$stroke=='0')])
par(mfrow=c(1,2))
plot(bmi_1, xlim=range(bmi_1$x,bmi_0$x), ylim=range(bmi_1$y,bmi_0$y), col = "red",
main = "Density Plot for BMI on Stroke Status",
xlab = "BMI", lwd=2)
lines(bmi_0, col = "grey", lwd= 2, lty = 2)
legend("topright", legend=c("stroke = 1", "stroke = 0"), lty = c(1,2),
col = c("red", "grey"), lwd=2, cex=1.2)
bmi_1 <- density(train$bmi[which(train$stroke=='1')])
bmi_0 <- density(train$bmi[which(train$stroke=='0')])
par(mfrow=c(1,2))
plot(bmi_1, xlim=range(bmi_1$x,bmi_0$x), ylim=range(bmi_1$y,bmi_0$y), col = "red",
main = "Density Plot for BMI on Stroke Status",
xlab = "BMI", lwd=2)
lines(bmi_0, col = "grey", lwd= 2, lty = 2)
legend("topright", legend=c("stroke = 1", "stroke = 0"), lty = c(1,2),
col = c("red", "grey"), lwd=2)
bmi_1 <- density(train$bmi[which(train$stroke=='1')])
bmi_0 <- density(train$bmi[which(train$stroke=='0')])
#par(mfrow=c(1,2))
plot(bmi_1, xlim=range(bmi_1$x,bmi_0$x), ylim=range(bmi_1$y,bmi_0$y), col = "red",
main = "Density Plot for BMI on Stroke Status",
xlab = "BMI", lwd=2)
lines(bmi_0, col = "grey", lwd= 2, lty = 2)
legend("topright", legend=c("stroke = 1", "stroke = 0"), lty = c(1,2),
col = c("red", "grey"), lwd=2)
gluc_1 <- density(train$avg_glucose_level[which(train$stroke=='1')])
gluc_0 <- density(train$avg_glucose_level[which(train$stroke=='0')])
#par(mfrow=c(1,2))
plot(gluc_1, xlim=range(gluc_1$x,gluc_0$x), ylim=range(gluc_1$y,gluc_0$y), col = "red",
main = "Density Plot for Avg Glucose Level on Stroke Status",
xlab = "Average Glucose Level", lwd=2)
lines(bmi_0, col = "grey", lwd= 2, lty = 2)
legend("topright", legend=c("stroke = 1", "stroke = 0"), lty = c(1,2),
col = c("red", "grey"), lwd=2)
gluc_1 <- density(train$avg_glucose_level[which(train$stroke=='1')])
gluc_0 <- density(train$avg_glucose_level[which(train$stroke=='0')])
#par(mfrow=c(1,2))
plot(gluc_1, xlim=range(gluc_1$x,gluc_0$x), ylim=range(0,0.03), col = "red",
main = "Density Plot for Avg Glucose Level on Stroke Status",
xlab = "Average Glucose Level", lwd=2)
lines(bmi_0, col = "grey", lwd= 2, lty = 2)
legend("topright", legend=c("stroke = 1", "stroke = 0"), lty = c(1,2),
col = c("red", "grey"), lwd=2)
gluc_1 <- density(train$avg_glucose_level[which(train$stroke=='1')])
gluc_0 <- density(train$avg_glucose_level[which(train$stroke=='0')])
#par(mfrow=c(1,2))
plot(gluc_1, xlim=range(gluc_1$x,gluc_0$x), ylim=range(0,0.5), col = "red",
main = "Density Plot for Avg Glucose Level on Stroke Status",
xlab = "Average Glucose Level", lwd=2)
lines(bmi_0, col = "grey", lwd= 2, lty = 2)
legend("topright", legend=c("stroke = 1", "stroke = 0"), lty = c(1,2),
col = c("red", "grey"), lwd=2)
gluc_1 <- density(train$avg_glucose_level[which(train$stroke=='1')])
gluc_0 <- density(train$avg_glucose_level[which(train$stroke=='0')])
#par(mfrow=c(1,2))
plot(gluc_1, xlim=range(gluc_1$x,gluc_0$x), ylim=range(0,0.05), col = "red",
main = "Density Plot for Avg Glucose Level on Stroke Status",
xlab = "Average Glucose Level", lwd=2)
lines(bmi_0, col = "grey", lwd= 2, lty = 2)
legend("topright", legend=c("stroke = 1", "stroke = 0"), lty = c(1,2),
col = c("red", "grey"), lwd=2)
gluc_1 <- density(train$avg_glucose_level[which(train$stroke=='1')])
gluc_0 <- density(train$avg_glucose_level[which(train$stroke=='0')])
#par(mfrow=c(1,2))
plot(gluc_1, xlim=range(gluc_1$x,gluc_0$x), ylim=range(0,0.06), col = "red",
main = "Density Plot for Avg Glucose Level on Stroke Status",
xlab = "Average Glucose Level", lwd=2)
lines(bmi_0, col = "grey", lwd= 2, lty = 2)
legend("topright", legend=c("stroke = 1", "stroke = 0"), lty = c(1,2),
col = c("red", "grey"), lwd=2)
age_1 <- density(train$age[which(train$stroke=='1')])
age_0 <- density(train$age[which(train$stroke=='0')])
#par(mfrow=c(1,2))
plot(age_1, xlim=range(age_1$x,age_0$x), ylim=range(age_1$y,age_0$y), col = "red",
main = "Density Plot for Age on Stroke Status",
xlab = "Age", lwd=2)
lines(bmi_0, col = "grey", lwd= 2, lty = 2)
legend("topright", legend=c("stroke = 1", "stroke = 0"), lty = c(1,2),
col = c("red", "grey"), lwd=2)
age_1 <- density(train$age[which(train$stroke=='1')])
age_0 <- density(train$age[which(train$stroke=='0')])
#par(mfrow=c(1,2))
plot(age_1, xlim=range(age_1$x,age_0$x), ylim=range(0,0.06), col = "red",
main = "Density Plot for Age on Stroke Status",
xlab = "Age", lwd=2)
lines(bmi_0, col = "grey", lwd= 2, lty = 2)
legend("topright", legend=c("stroke = 1", "stroke = 0"), lty = c(1,2),
col = c("red", "grey"), lwd=2)
min(data$avg_glucose_level)
max(data$avg_glucose_level)
ggplot(data, aes(x = bmi, fill = as.factor(stroke))) +
geom_histogram(binwidth = , position = "dodge")
ggplot(data, aes(x = bmi, fill = as.factor(stroke))) +
geom_histogram(binwidth = 5, position = "dodge")
ggplot(data, aes(x = bmi, fill = as.factor(stroke))) +
geom_histogram(binwidth = 1, position = "dodge")
ggplot(data, aes(x = bmi, fill = gender)) +
geom_histogram(binwidth = 1) +
facet_wrap(~stroke, scales = "free") +
labs(x = "BMI", y = "Frequency")
ggplot(data, aes(x = bmi, fill = gender)) +
geom_histogram(binwidth = 5) +
facet_wrap(~stroke, scales = "free") +
labs(x = "BMI", y = "Frequency")
ggplot(data, aes(x = bmi, fill = as.factor(stroke))) +
geom_histogram(binwidth = 10, position = "dodge")
ggplot(data, aes(x = bmi)) +
geom_histogram(binwidth = 5) +
facet_wrap(~stroke, scales = "free") +
labs(x = "BMI", y = "Frequency")
ggplot(data, aes(x = bmi, fill = stroke)) +
geom_histogram(binwidth = 5) +
labs(x = "BMI", y = "Frequency")
ggplot(data, aes(x = bmi, fill = hypertension)) +
geom_histogram(binwidth = 1) +  # Adjust binwidth and fill color as needed
facet_wrap(~stroke, scales = "free") +  # Facet by binomial_var
labs(x = "BMI", y = "Frequency")
ggplot(data, aes(x = bmi, fill = hypertension)) +
geom_histogram(binwidth = 5) +  # Adjust binwidth and fill color as needed
facet_wrap(~stroke, scales = "free") +  # Facet by binomial_var
labs(x = "BMI", y = "Frequency")
ggplot(data, aes(x = bmi, fill = heart_disease)) +
geom_histogram(binwidth = 1) +  # Adjust binwidth and fill color as needed
facet_wrap(~stroke, scales = "free") +  # Facet by binomial_var
labs(x = "BMI", y = "Frequency")
ggplot(data, aes(x = bmi, fill = heart_disease)) +
geom_histogram(binwidth = 5) +  # Adjust binwidth and fill color as needed
facet_wrap(~stroke, scales = "free") +  # Facet by binomial_var
labs(x = "BMI", y = "Frequency")
ggplot(data, aes(x = bmi, fill = heart_disease)) +
geom_histogram(binwidth = 3) +  # Adjust binwidth and fill color as needed
facet_wrap(~stroke, scales = "free") +  # Facet by binomial_var
labs(x = "BMI", y = "Frequency")
ggplot(data, aes(x = bmi, fill = hypertension)) +
geom_histogram(binwidth = 3) +  # Adjust binwidth and fill color as needed
facet_wrap(~stroke, scales = "free") +  # Facet by binomial_var
labs(x = "BMI", y = "Frequency")
ggplot(data, aes(x = bmi, fill = gender)) +
geom_histogram(binwidth = 3) +
facet_wrap(~stroke, scales = "free") +
labs(x = "BMI", y = "Frequency")
ggplot(data, aes(x = bmi, fill = stroke)) +
geom_histogram(binwidth = 3) +
labs(x = "BMI", y = "Frequency")
ggplot(data, aes(x = bmi, fill = ever_married)) +
geom_histogram(binwidth = 1) +  # Adjust binwidth and fill color as needed
facet_wrap(~stroke, scales = "free") +  # Facet by binomial_var
labs(x = "BMI", y = "Frequency")
ggplot(data, aes(x = bmi, fill = ever_married)) +
geom_histogram(binwidth = 3) +  # Adjust binwidth and fill color as needed
facet_wrap(~stroke, scales = "free") +  # Facet by binomial_var
labs(x = "BMI", y = "Frequency")
ggplot(data, aes(x = bmi, fill = Residence_type)) +
geom_histogram(binwidth = 1) +  # Adjust binwidth and fill color as needed
facet_wrap(~stroke, scales = "free") +  # Facet by binomial_var
labs(x = "BMI", y = "Frequency")
ggplot(data, aes(x = bmi, fill = Residence_type)) +
geom_histogram(binwidth = 3) +  # Adjust binwidth and fill color as needed
facet_wrap(~stroke, scales = "free") +  # Facet by binomial_var
labs(x = "BMI", y = "Frequency")
ggplot(data, aes(x = bmi, fill = work_type)) +
geom_histogram(binwidth = 1) +  # Adjust binwidth and fill color as needed
facet_wrap(~stroke, scales = "free") +  # Facet by binomial_var
labs(x = "BMI", y = "Frequency")
ggplot(data, aes(x = bmi, fill = work_type)) +
geom_histogram(binwidth = 3) +  # Adjust binwidth and fill color as needed
facet_wrap(~stroke, scales = "free") +  # Facet by binomial_var
labs(x = "BMI", y = "Frequency")
ggplot(data, aes(x = bmi, fill = smoking_status)) +
geom_histogram(binwidth = 3) +  # Adjust binwidth and fill color as needed
facet_wrap(~stroke, scales = "free") +  # Facet by binomial_var
labs(x = "BMI", y = "Frequency")
ggplot(data, aes(x = avg_glucose_level, fill = as.factor(stroke))) +
geom_histogram(binwidth = 1, position = "dodge")
ggplot(data, aes(x = avg_glucose_level, fill = stroke)) +
geom_histogram(binwidth = 5) +
labs(x = "Average Glucose Level", y = "Frequency")
ggplot(data, aes(x = avg_glucose_level, fill = stroke)) +
geom_histogram(binwidth = 3) +
labs(x = "Average Glucose Level", y = "Frequency")
ggplot(data, aes(x = avg_glucose_level, fill = gender)) +
geom_histogram(binwidth = 1) +  # Adjust binwidth and fill color as needed
facet_wrap(~stroke, scales = "free") +  # Facet by binomial_var
labs(x = "Average Glucose Level", y = "Frequency")
ggplot(data, aes(x = avg_glucose_level, fill = gender)) +
geom_histogram(binwidth = 3) +  # Adjust binwidth and fill color as needed
facet_wrap(~stroke, scales = "free") +  # Facet by binomial_var
labs(x = "Average Glucose Level", y = "Frequency")
ggplot(data, aes(x = avg_glucose_level, fill = gender)) +
geom_histogram(binwidth = 5) +  # Adjust binwidth and fill color as needed
facet_wrap(~stroke, scales = "free") +  # Facet by binomial_var
labs(x = "Average Glucose Level", y = "Frequency")
ggplot(data, aes(x = avg_glucose_level, fill = gender)) +
geom_histogram(binwidth = 3) +  # Adjust binwidth and fill color as needed
facet_wrap(~stroke, scales = "free") +  # Facet by binomial_var
labs(x = "Average Glucose Level", y = "Frequency")
ggplot(data, aes(x = avg_glucose_level, fill = gender)) +
geom_histogram(binwidth = 5) +  # Adjust binwidth and fill color as needed
facet_wrap(~stroke, scales = "free") +  # Facet by binomial_var
labs(x = "Average Glucose Level", y = "Frequency")
ggplot(data, aes(x = avg_glucose_level, fill = hypertension)) +
geom_histogram(binwidth = 1) +  # Adjust binwidth and fill color as needed
facet_wrap(~stroke, scales = "free") +  # Facet by binomial_var
labs(x = "Average Glucose Level", y = "Frequency")
ggplot(data, aes(x = avg_glucose_level, fill = hypertension)) +
geom_histogram(binwidth = 5) +  # Adjust binwidth and fill color as needed
facet_wrap(~stroke, scales = "free") +  # Facet by binomial_var
labs(x = "Average Glucose Level", y = "Frequency")
ggplot(data, aes(x = avg_glucose_level, fill = heart_disease)) +
geom_histogram(binwidth = 1) +  # Adjust binwidth and fill color as needed
facet_wrap(~stroke, scales = "free") +  # Facet by binomial_var
labs(x = "AVerage Glucose Level", y = "Frequency")
ggplot(data, aes(x = avg_glucose_level, fill = heart_disease)) +
geom_histogram(binwidth = 5) +  # Adjust binwidth and fill color as needed
facet_wrap(~stroke, scales = "free") +  # Facet by binomial_var
labs(x = "AVerage Glucose Level", y = "Frequency")
ggplot(data, aes(x = avg_glucose_level, fill = ever_married)) +
geom_histogram(binwidth = 1) +  # Adjust binwidth and fill color as needed
facet_wrap(~stroke, scales = "free") +  # Facet by binomial_var
labs(x = "Average Glucose Level", y = "Frequency")
ggplot(data, aes(x = avg_glucose_level, fill = ever_married)) +
geom_histogram(binwidth = 5) +  # Adjust binwidth and fill color as needed
facet_wrap(~stroke, scales = "free") +  # Facet by binomial_var
labs(x = "Average Glucose Level", y = "Frequency")
ggplot(data, aes(x = avg_glucose_level, fill = Residence_type)) +
geom_histogram(binwidth = 1) +  # Adjust binwidth and fill color as needed
facet_wrap(~stroke, scales = "free") +  # Facet by binomial_var
labs(x = "Average Glucose Level", y = "Frequency")
ggplot(data, aes(x = avg_glucose_level, fill = Residence_type)) +
geom_histogram(binwidth = 5) +  # Adjust binwidth and fill color as needed
facet_wrap(~stroke, scales = "free") +  # Facet by binomial_var
labs(x = "Average Glucose Level", y = "Frequency")
ggplot(data, aes(x = avg_glucose_level, fill = work_type)) +
geom_histogram(binwidth = 5) +  # Adjust binwidth and fill color as needed
facet_wrap(~stroke, scales = "free") +  # Facet by binomial_var
labs(x = "AVerage Glucose Level", y = "Frequency")
ggplot(data, aes(x = avg_glucose_level, fill = smoking_status)) +
geom_histogram(binwidth = 5) +  # Adjust binwidth and fill color as needed
facet_wrap(~stroke, scales = "free") +  # Facet by binomial_var
labs(x = "Average Glucose Level", y = "Frequency")
ggplot(data, aes(x = age, fill = as.factor(stroke))) +
geom_histogram(binwidth = 1, position = "dodge")
ggplot(data, aes(x = age, fill = stroke)) +
geom_histogram(binwidth = 3, position = "dodge")
partialPlot(rf_model, train, 'bmi', which.class = '1',
main = "PDP of BMI for Stroke = 1")
par(mfrow=c(2.2))
par(mfrow=c(1,2))
partialPlot(rf_model, train, 'bmi', which.class = '1',
main = "PDP of BMI for Stroke = 1")
partialPlot(rf_model, train, 'bmi', which.class = '0',
main = "PDP of BMI for Stroke = 0")
par(mfrow=c(1,2))
partialPlot(rf_model, train, 'age', which.class = '1',
main = "PDP of Age for Stroke = 1")
partialPlot(rf_model, train, 'Age', which.class = '0',
main = "PDP of Age for Stroke = 0")
partialPlot(rf_model, train, 'Age', which.class = '0',
main = "PDP of Age for Stroke = 0")
par(mfrow=c(1,2))
partialPlot(rf_model, train, 'age', which.class = '1',
main = "PDP of Age for Stroke = 1")
partialPlot(rf_model, train, 'age', which.class = '0',
main = "PDP of Age for Stroke = 0")
par(mfrow=c(1,2))
partialPlot(rf_model, train, 'avg_glucose_level', which.class = '1',
main = "PDP of Average Glucose Level for Stroke = 1")
partialPlot(rf_model, train, 'avg_glucose_level', which.class = '0',
main = "PDP of Average Glucose Level for Stroke = 0")
varImpPlot(logitmodel, sort=T)
variable_importance <- abs(coef(logitmodel))
# Create a data frame to store variable names and their importance scores
importance_data <- data.frame(
Variable = names(variable_importance),
Importance = variable_importance
)
# Sort the data frame by importance
importance_data <- importance_data[order(importance_data$Importance, decreasing = TRUE), ]
# Create a bar plot to visualize variable importance
ggplot(importance_data, aes(x = Variable, y = Importance)) +
geom_bar(stat = "identity") +
labs(title = "Variable Importance for GLM", x = "Variable", y = "Importance") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for readability
vif(rf_model)
varImpPlot(rf_model, sort = T)
variable_importance <- abs(coef(logitmodel))
# Create a data frame to store variable names and their importance scores
importance_data <- data.frame(
Variable = names(variable_importance),
Importance = variable_importance
)
# Sort the data frame by importance
importance_data <- importance_data[order(importance_data$Importance, decreasing = TRUE), ]
# Create a bar plot to visualize variable importance
ggplot(importance_data, aes(x = Variable, y = Importance)) +
geom_bar(stat = "identity") +
labs(title = "Variable Importance for GLM", x = "Variable", y = "Importance") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for readability
vif(logitmodel)
par(mfrow=c(1,2))
varImpPlot(rf_model, sort = T)
variable_importance <- abs(coef(logitmodel))
# Create a data frame to store variable names and their importance scores
importance_data <- data.frame(
Variable = names(variable_importance),
Importance = variable_importance
)
# Sort the data frame by importance
importance_data <- importance_data[order(importance_data$Importance, decreasing = TRUE), ]
# Create a bar plot to visualize variable importance
ggplot(importance_data, aes(x = Variable, y = Importance)) +
geom_bar(stat = "identity") +
labs(title = "Variable Importance for GLM", x = "Variable", y = "Importance") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for readability
vif(logitmodel)
summary(logitmodel)
variable_importance <- abs(coef(logitmodel))
importance_data <- data.frame(
Variable = names(variable_importance),
Importance = variable_importance
)
importance_data <- importance_data[order(importance_data$Importance, decreasing = TRUE), ]
ggplot(importance_data, aes(x = Variable, y = Importance)) +
geom_bar(stat = "identity") +
labs(title = "Variable Importance for GLM", x = "Variable", y = "Importance")
summary(logitmodel)
varImpPlot(rf_model, sort = T)
variable_importance <- abs(coef(logitmodel))
importance_data <- data.frame(
Variable = names(variable_importance),
Importance = variable_importance
)
importance_data <- importance_data[order(importance_data$Importance, decreasing = TRUE), ]
ggplot(importance_data, aes(x = Variable, y = Importance)) +
geom_bar(stat = "identity") +
labs(title = "Variable Importance for GLM", x = "Variable", y = "Importance") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for readability
vif(logitmodel)
summary(logitmodel)
varImpPlot(rf_model, sort = T)
vif(logitmodel)
varImp(logitmodel)
varImp(logitmodel, sort = T)
varImp(logitmodel, sort = T)
summary(logitmodel)
vif(logitmodel)
varImpPlot(rf_model, sort = T)
varImp(logitmodel)
# Calculate variable importance
importance_scores <- varImp(logitmodel)
# Convert the importance scores into a data frame
importance_df <- data.frame(Variable = rownames(importance_scores$importance),
Importance = importance_scores$importance)
# Sort the data frame by importance in descending order
importance_df <- importance_df[order(importance_df$Importance, decreasing = TRUE), ]
View(importance_scores)
# Convert the importance scores into a data frame
importance_df <- data.frame(Variable = rownames(importance_scores),
Importance = Overall)
# Convert the importance scores into a data frame
importance_df <- data.frame(Variable = rownames(importance_scores),
Importance = importance_scores$Overall)
View(importance_df)
# Sort the data frame by importance in descending order
importance_df <- importance_df[order(importance_df$Importance, decreasing = TRUE), ]
View(importance_df)
# Create a ggplot to visualize variable importance
ggplot(importance_df, aes(x = reorder(Variable, Importance), y = Importance)) +
geom_bar(stat = "identity", fill = "skyblue") +
coord_flip() +
labs(title = "Variable Importance for Logistic Regression Model",
x = "Importance",
y = "Variable") +
theme_minimal()
ggplot(importance_df, aes(x = Variable, y = Importance)) +
geom_bar(stat = "identity", fill = "skyblue") +
coord_flip() +
labs(title = "Variable Importance for GLM",
x = "Importance",
y = "Variable") +
theme_minimal()
ggplot(importance_df, aes(x = reorder(Variable, Importance), y = Importance)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Variable Importance for GLM",
x = "Importance",
y = "Variable") +
theme_minimal()
# Create a ggplot to visualize variable importance
ggplot(importance_df, aes(x = reorder(Variable, Importance), y = Importance)) +
geom_bar(stat = "identity", fill = "skyblue") +
coord_flip() +
labs(title = "Variable Importance for GLM",
x = "Importance",
y = "Variable") +
theme_minimal()
ggplot(importance_df, aes(x = reorder(Variable, Importance), y = Importance)) +
geom_bar(stat = "identity", fill = "skyblue") +
coord_flip() +
labs(title = "Variable Importance for GLM",
x = "Variable",
y = "Importance") +
theme_minimal()
summary(logitmodel)
ggplot(importance_df, aes(x = reorder(Variable, Importance), y = Importance)) +
geom_bar(stat = "identity", fill = "skyblue") +
coord_flip() +
labs(title = "Variable Importance for GLM",
x = "Variables",
y = "Importance") +
theme_minimal()
varImpPlot(pred_logitmod)
importance_scores <- varImp(pred_logitmod)
View(logitmodel)
summary(logitmodel)
vif(logitmodel)
varImpPlot(rf_model, sort = T)
View(summary_results_auc)
View(summary_results_auc)
knitr::opts_chunk$set(echo = TRUE)
rf.cm = confusionMatrix(rf_predicted_class, test_y, mode = "everything", positive ="1")
library(caret)
log.cm = confusionMatrix(log_predicted_class,test_y, mode = "everything", positive ="1")
log.cm
libraries("tidyverse","boot","randomForest","psych","AUC","MASS","car","viridis","caret","ggplot2")
library(easypackages)
libraries("tidyverse","boot","randomForest","psych","AUC","MASS","car","viridis","caret","ggplot2")
log.cm = caret::confusionMatrix(log_predicted_class,test_y, mode = "everything", positive ="1")
log.cm
rf.cm = confusionMatrix(rf_predicted_class, test_y, mode = "everything", positive ="1")
rf.cm
