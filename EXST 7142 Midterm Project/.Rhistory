nn_log_predicted_class <- ifelse(nn_pred_logitmod > 0.5, 1, 0)
nn_log_predicted_class <- factor(nn_log_predicted_class, levels = c(0, 1))
nn_log_error <- table(actual = nn_test_y, predicted = nn_log_predicted_class)
nn_log_misclass_rate <- 1-sum(diag(nn_log_error))/sum(nn_log_error)
nn_log_auc <- auc(roc(nn_log_predicted_class, nn_test_y))
summary(nn_log)
nn_train_x <- data_match_nn[index_nn, 2:11]
nn_test_x <- data_match_nn[-index_nn, 2:11]
nn_rf_model <- randomForest(stroke~.,data = nn_train, xtest = nn_test_x,
ytest=nn_test_y,ntree=300, keep.forest = TRUE)
nn_rf_predicted_class <- rf_model$test$predicted
nn_rf_error <- table(actual = nn_test_y, predicted = nn_rf_predicted_class)
nn_rf_misclass_rate <- 1-sum(diag(nn_rf_error))/sum(nn_rf_error)
nn_rf_error <- table(actual = nn_test_y, predicted = nn_rf_predicted_class)
nn_rf_model <- randomForest(stroke~.,data = nn_train, xtest = nn_test_x,
ytest=nn_test_y,ntree=300, keep.forest = TRUE)
nn_rf_predicted_class <- nn_rf_model$test$predicted
nn_rf_error <- table(actual = nn_test_y, predicted = nn_rf_predicted_class)
nn_rf_misclass_rate <- 1-sum(diag(nn_rf_error))/sum(nn_rf_error)
nn_rf_auc <- auc(roc(nn_rf_predicted_class,nn_test_y))
varImpPlot(nn_rf_model, sort = T)
dmn <- data_match_nn[,1:11]
dmn2 <- rbind(dmn,data)
num_replicated_rows <- sum(duplicated(dmn2))
duplicated(dmn2)
df <- dmn2[1:400, ]
d <- rbind(df,dmn)
data_match_nn <- match.data(match_nn)
data_match_nn <- data_match_nn[, c("stroke", setdiff(names(data_match_nn), "stroke"))]
nn = nrow(d)
set.seed(1)
index_nn <- sample(1:nn, size = nn*.7, replace = F)
nn_train_x <- d[index_nn, 2:11]
nn_test_x <- d[-index_nn, 2:11]
nn_train_y <- d[index_nn, 1]
nn_test_y <- d[-index_nn, 1]
nn_train <-d[index_nn, 1:11]
nn_test <- d[-index_nn, 1:11]
nn_log <- glm(stroke ~., family = binomial(link = logit), data = nn_train)
summary(nn_log)
nn_test$subclass <- factor(nn_test$subclass, levels = levels(nn_log$subclass))
dmn <- data_match_nn[,1:11]
dmn2 <- rbind(dmn,data)
num_replicated_rows <- sum(duplicated(dmn2))
duplicated(dmn2)
df <- dmn2[1:400, ]
d <- rbind(df,dmn)
data_match_nn <- match.data(match_nn)
data_match_nn <- data_match_nn[, c("stroke", setdiff(names(data_match_nn), "stroke"))]
nn = nrow(d)
set.seed(1)
index_nn <- sample(1:nn, size = nn*.7, replace = F)
nn_train_x <- d[index_nn, 2:11]
nn_test_x <- d[-index_nn, 2:11]
nn_train_y <- d[index_nn, 1]
nn_test_y <- d[-index_nn, 1]
nn_train <-d[index_nn, 1:11]
nn_test <- d[-index_nn, 1:11]
nn_log <- glm(stroke ~., family = binomial(link = logit), data = nn_train)
summary(nn_log)
#nn_test$subclass <- factor(nn_test$subclass, levels = levels(nn_log$subclass))
nn_pred_logitmod <- predict(nn_log, newdata = nn_test, type = "response")
nn_log_predicted_class <- ifelse(nn_pred_logitmod > 0.5, 1, 0)
nn_log_predicted_class <- factor(nn_log_predicted_class, levels = c(0, 1))
nn_log_error <- table(actual = nn_test_y, predicted = nn_log_predicted_class)
nn_log_misclass_rate <- 1-sum(diag(nn_log_error))/sum(nn_log_error)
nn_log_auc <- auc(roc(nn_log_predicted_class, nn_test_y))
nn_rf_model <- randomForest(stroke~.,data = nn_train, xtest = nn_test_x,
ytest=nn_test_y,ntree=300, keep.forest = TRUE)
nn_rf_predicted_class <- nn_rf_model$test$predicted
nn_rf_error <- table(actual = nn_test_y, predicted = nn_rf_predicted_class)
nn_rf_misclass_rate <- 1-sum(diag(nn_rf_error))/sum(nn_rf_error)
nn_rf_auc <- auc(roc(nn_rf_predicted_class,nn_test_y))
varImpPlot(nn_rf_model, sort = T)
dmn <- data_match_nn[,1:11]
dmn2 <- rbind(dmn,data)
num_replicated_rows <- sum(duplicated(dmn2))
duplicated(dmn2)
df <- dmn2[1:400, ]
d <- rbind(df,dmn)
data_match_nn <- match.data(match_nn)
data_match_nn <- data_match_nn[, c("stroke", setdiff(names(data_match_nn), "stroke"))]
nn = nrow(data_match_nn)
set.seed(1)
index_nn <- sample(1:nn, size = nn*.7, replace = F)
nn_train_x <- data_match_nn[index_nn, 2:11]
nn_test_x <- data_match_nn[-index_nn, 2:11]
nn_train_y <- data_match_nn[index_nn, 1]
nn_test_y <- data_match_nn[-index_nn, 1]
nn_train <- data_match_nn[index_nn, 1:11]
nn_test <- data_match_nn[-index_nn, 1:11]
nn_log <- glm(stroke ~., family = binomial(link = logit), data = nn_train)
summary(nn_log)
nn_test$subclass <- factor(nn_test$subclass, levels = levels(nn_log$subclass))
dmn <- data_match_nn[,1:11]
dmn2 <- rbind(dmn,data)
num_replicated_rows <- sum(duplicated(dmn2))
duplicated(dmn2)
df <- dmn2[1:400, ]
d <- rbind(df,dmn)
data_match_nn <- match.data(match_nn)
data_match_nn <- data_match_nn[, c("stroke", setdiff(names(data_match_nn), "stroke"))]
nn = nrow(data_match_nn)
set.seed(1)
index_nn <- sample(1:nn, size = nn*.7, replace = F)
nn_train_x <- data_match_nn[index_nn, 2:11]
nn_test_x <- data_match_nn[-index_nn, 2:11]
nn_train_y <- data_match_nn[index_nn, 1]
nn_test_y <- data_match_nn[-index_nn, 1]
nn_train <- data_match_nn[index_nn, 1:11]
nn_test <- data_match_nn[-index_nn, 1:11]
nn_log <- glm(stroke ~., family = binomial(link = logit), data = nn_train)
summary(nn_log)
#nn_test$subclass <- factor(nn_test$subclass, levels = levels(nn_log$subclass))
nn_pred_logitmod <- predict(nn_log, newdata = nn_test, type = "response")
nn_log_predicted_class <- ifelse(nn_pred_logitmod > 0.5, 1, 0)
nn_log_predicted_class <- factor(nn_log_predicted_class, levels = c(0, 1))
nn_log_error <- table(actual = nn_test_y, predicted = nn_log_predicted_class)
nn_log_misclass_rate <- 1-sum(diag(nn_log_error))/sum(nn_log_error)
nn_log_auc <- auc(roc(nn_log_predicted_class, nn_test_y))
nn_rf_model <- randomForest(stroke~.,data = nn_train, xtest = nn_test_x,
ytest=nn_test_y,ntree=300, keep.forest = TRUE)
nn_rf_predicted_class <- nn_rf_model$test$predicted
nn_rf_error <- table(actual = nn_test_y, predicted = nn_rf_predicted_class)
nn_rf_misclass_rate <- 1-sum(diag(nn_rf_error))/sum(nn_rf_error)
nn_rf_auc <- auc(roc(nn_rf_predicted_class,nn_test_y))
varImpPlot(nn_rf_model, sort = T)
data_match_nn <- match.data(match_nn)
data_match_nn <- data_match_nn[, c("stroke", setdiff(names(data_match_nn), "stroke"))]
dmn <- data_match_nn[,1:11]
dmn2 <- rbind(dmn,data)
num_replicated_rows <- sum(duplicated(dmn2))
duplicated(dmn2)
df <- dmn2[1:400, ]
d <- rbind(df,dmn)
nn = nrow(data_match_nn)
set.seed(1)
index_nn <- sample(1:nn, size = nn*.7, replace = F)
nn_train_x <- data_match_nn[index_nn, 2:11]
nn_test_x <- data_match_nn[-index_nn, 2:11]
nn_train_y <- data_match_nn[index_nn, 1]
nn_test_y <- data_match_nn[-index_nn, 1]
nn_train <- data_match_nn[index_nn, 1:11]
nn_test <- data_match_nn[-index_nn, 1:11]
nn_log <- glm(stroke ~., family = binomial(link = logit), data = nn_train)
summary(nn_log)
#nn_test$subclass <- factor(nn_test$subclass, levels = levels(nn_log$subclass))
nn_pred_logitmod <- predict(nn_log, newdata = nn_test, type = "response")
nn_log_predicted_class <- ifelse(nn_pred_logitmod > 0.5, 1, 0)
nn_log_predicted_class <- factor(nn_log_predicted_class, levels = c(0, 1))
nn_log_error <- table(actual = nn_test_y, predicted = nn_log_predicted_class)
nn_log_misclass_rate <- 1-sum(diag(nn_log_error))/sum(nn_log_error)
nn_log_auc <- auc(roc(nn_log_predicted_class, nn_test_y))
nn_rf_model <- randomForest(stroke~.,data = nn_train, xtest = nn_test_x,
ytest=nn_test_y,ntree=300, keep.forest = TRUE)
nn_rf_predicted_class <- nn_rf_model$test$predicted
nn_rf_error <- table(actual = nn_test_y, predicted = nn_rf_predicted_class)
nn_rf_misclass_rate <- 1-sum(diag(nn_rf_error))/sum(nn_rf_error)
nn_rf_auc <- auc(roc(nn_rf_predicted_class,nn_test_y))
varImpPlot(nn_rf_model, sort = T)
data_match_nn <- match.data(match_nn)
data_match_nn <- data_match_nn[, c("stroke", setdiff(names(data_match_nn), "stroke"))]
dmn <- data_match_nn[,1:11]
dmn2 <- rbind(dmn,data)
num_replicated_rows <- sum(duplicated(dmn2))
duplicated(dmn2)
df <- dmn2[1:400, ]
d <- rbind(df,dmn)
nn = nrow(d)
set.seed(1)
index_nn <- sample(1:nn, size = nn*.7, replace = F)
nn_train_x <- d[index_nn, 2:11]
nn_test_x <- d[-index_nn, 2:11]
nn_train_y <- d[index_nn, 1]
nn_test_y <- d[-index_nn, 1]
nn_train <- d[index_nn, 1:11]
nn_test <- d[-index_nn, 1:11]
nn_log <- glm(stroke ~., family = binomial(link = logit), data = nn_train)
summary(nn_log)
#nn_test$subclass <- factor(nn_test$subclass, levels = levels(nn_log$subclass))
nn_pred_logitmod <- predict(nn_log, newdata = nn_test, type = "response")
nn_log_predicted_class <- ifelse(nn_pred_logitmod > 0.5, 1, 0)
nn_log_predicted_class <- factor(nn_log_predicted_class, levels = c(0, 1))
nn_log_error <- table(actual = nn_test_y, predicted = nn_log_predicted_class)
nn_log_misclass_rate <- 1-sum(diag(nn_log_error))/sum(nn_log_error)
nn_log_auc <- auc(roc(nn_log_predicted_class, nn_test_y))
nn_rf_model <- randomForest(stroke~.,data = nn_train, xtest = nn_test_x,
ytest=nn_test_y,ntree=300, keep.forest = TRUE)
nn_rf_predicted_class <- nn_rf_model$test$predicted
nn_rf_error <- table(actual = nn_test_y, predicted = nn_rf_predicted_class)
nn_rf_misclass_rate <- 1-sum(diag(nn_rf_error))/sum(nn_rf_error)
nn_rf_auc <- auc(roc(nn_rf_predicted_class,nn_test_y))
varImpPlot(nn_rf_model, sort = T)
data_match_nn <- match.data(match_nn)
data_match_nn <- data_match_nn[, c("stroke", setdiff(names(data_match_nn), "stroke"))]
dmn <- data_match_nn[,1:11]
dmn2 <- rbind(dmn,data)
num_replicated_rows <- sum(duplicated(dmn2))
duplicated(dmn2)
df <- dmn2[1:200, ]
d <- rbind(df,dmn)
nn = nrow(d)
set.seed(1)
index_nn <- sample(1:nn, size = nn*.7, replace = F)
nn_train_x <- d[index_nn, 2:11]
nn_test_x <- d[-index_nn, 2:11]
nn_train_y <- d[index_nn, 1]
nn_test_y <- d[-index_nn, 1]
nn_train <- d[index_nn, 1:11]
nn_test <- d[-index_nn, 1:11]
nn_log <- glm(stroke ~., family = binomial(link = logit), data = nn_train)
summary(nn_log)
#nn_test$subclass <- factor(nn_test$subclass, levels = levels(nn_log$subclass))
nn_pred_logitmod <- predict(nn_log, newdata = nn_test, type = "response")
data_match_nn <- match.data(match_nn)
data_match_nn <- data_match_nn[, c("stroke", setdiff(names(data_match_nn), "stroke"))]
dmn <- data_match_nn[,1:11]
dmn2 <- rbind(dmn,data)
num_replicated_rows <- sum(duplicated(dmn2))
duplicated(dmn2)
df <- dmn2[1:200, ]
d <- rbind(df,dmn)
nn = nrow(d)
set.seed(1)
index_nn <- sample(1:nn, size = nn*.7, replace = F)
nn_train_x <- d[index_nn, 2:11]
nn_test_x <- d[-index_nn, 2:11]
nn_train_y <- d[index_nn, 1]
nn_test_y <- d[-index_nn, 1]
nn_train <- d[index_nn, 1:11]
nn_test <- d[-index_nn, 1:11]
nn_log <- glm(stroke ~., family = binomial(link = logit), data = nn_train)
summary(nn_log)
#nn_test$subclass <- factor(nn_test$subclass, levels = levels(nn_log$subclass))
nn_pred_logitmod <- predict(nn_log, newdata = nn_test, type = "response")
data_match_nn <- match.data(match_nn)
data_match_nn <- data_match_nn[, c("stroke", setdiff(names(data_match_nn), "stroke"))]
dmn <- data_match_nn[,1:11]
dmn2 <- rbind(dmn,data)
num_replicated_rows <- sum(duplicated(dmn2))
duplicated(dmn2)
df <- dmn2[1:400, ]
d <- rbind(df,dmn)
nn = nrow(d)
set.seed(1)
index_nn <- sample(1:nn, size = nn*.7, replace = F)
nn_train_x <- d[index_nn, 2:11]
nn_test_x <- d[-index_nn, 2:11]
nn_train_y <- d[index_nn, 1]
nn_test_y <- d[-index_nn, 1]
nn_train <- d[index_nn, 1:11]
nn_test <- d[-index_nn, 1:11]
nn_log <- glm(stroke ~., family = binomial(link = logit), data = nn_train)
summary(nn_log)
#nn_test$subclass <- factor(nn_test$subclass, levels = levels(nn_log$subclass))
nn_pred_logitmod <- predict(nn_log, newdata = nn_test, type = "response")
nn_log_predicted_class <- ifelse(nn_pred_logitmod > 0.5, 1, 0)
nn_log_predicted_class <- factor(nn_log_predicted_class, levels = c(0, 1))
nn_log_error <- table(actual = nn_test_y, predicted = nn_log_predicted_class)
nn_log_misclass_rate <- 1-sum(diag(nn_log_error))/sum(nn_log_error)
nn_log_auc <- auc(roc(nn_log_predicted_class, nn_test_y))
nn_rf_model <- randomForest(stroke~.,data = nn_train, xtest = nn_test_x,
ytest=nn_test_y,ntree=300, keep.forest = TRUE)
nn_rf_predicted_class <- nn_rf_model$test$predicted
nn_rf_error <- table(actual = nn_test_y, predicted = nn_rf_predicted_class)
nn_rf_misclass_rate <- 1-sum(diag(nn_rf_error))/sum(nn_rf_error)
nn_rf_auc <- auc(roc(nn_rf_predicted_class,nn_test_y))
varImpPlot(nn_rf_model, sort = T)
data_match_nn <- match.data(match_nn)
data_match_nn <- data_match_nn[, c("stroke", setdiff(names(data_match_nn), "stroke"))]
dmn <- data_match_nn[,1:11]
dmn2 <- rbind(dmn,data)
num_replicated_rows <- sum(duplicated(dmn2))
duplicated(dmn2)
df <- dmn2[1:300, ]
d <- rbind(df,dmn)
nn = nrow(d)
set.seed(1)
index_nn <- sample(1:nn, size = nn*.7, replace = F)
nn_train_x <- d[index_nn, 2:11]
nn_test_x <- d[-index_nn, 2:11]
nn_train_y <- d[index_nn, 1]
nn_test_y <- d[-index_nn, 1]
nn_train <- d[index_nn, 1:11]
nn_test <- d[-index_nn, 1:11]
nn_log <- glm(stroke ~., family = binomial(link = logit), data = nn_train)
summary(nn_log)
#nn_test$subclass <- factor(nn_test$subclass, levels = levels(nn_log$subclass))
nn_pred_logitmod <- predict(nn_log, newdata = nn_test, type = "response")
nn_log_predicted_class <- ifelse(nn_pred_logitmod > 0.5, 1, 0)
nn_log_predicted_class <- factor(nn_log_predicted_class, levels = c(0, 1))
nn_log_error <- table(actual = nn_test_y, predicted = nn_log_predicted_class)
nn_log_misclass_rate <- 1-sum(diag(nn_log_error))/sum(nn_log_error)
nn_log_auc <- auc(roc(nn_log_predicted_class, nn_test_y))
nn_rf_model <- randomForest(stroke~.,data = nn_train, xtest = nn_test_x,
ytest=nn_test_y,ntree=300, keep.forest = TRUE)
nn_rf_predicted_class <- nn_rf_model$test$predicted
nn_rf_error <- table(actual = nn_test_y, predicted = nn_rf_predicted_class)
nn_rf_misclass_rate <- 1-sum(diag(nn_rf_error))/sum(nn_rf_error)
nn_rf_auc <- auc(roc(nn_rf_predicted_class,nn_test_y))
varImpPlot(nn_rf_model, sort = T)
duplicated(dmn2)
!duplicated(dmn2)
df <- dmn2[1:407, ]
d <- rbind(df,dmn)
nn = nrow(d)
set.seed(1)
index_nn <- sample(1:nn, size = nn*.7, replace = F)
nn_train_x <- d[index_nn, 2:11]
nn_test_x <- d[-index_nn, 2:11]
nn_train_y <- d[index_nn, 1]
nn_test_y <- d[-index_nn, 1]
nn_train <- d[index_nn, 1:11]
nn_test <- d[-index_nn, 1:11]
nn_log <- glm(stroke ~., family = binomial(link = logit), data = nn_train)
summary(nn_log)
nn_pred_logitmod <- predict(nn_log, newdata = nn_test, type = "response")
nn_log_predicted_class <- ifelse(nn_pred_logitmod > 0.5, 1, 0)
nn_log_predicted_class <- factor(nn_log_predicted_class, levels = c(0, 1))
nn_log_error <- table(actual = nn_test_y, predicted = nn_log_predicted_class)
nn_log_misclass_rate <- 1-sum(diag(nn_log_error))/sum(nn_log_error)
nn_log_auc <- auc(roc(nn_log_predicted_class, nn_test_y))
nn_rf_model <- randomForest(stroke~.,data = nn_train, xtest = nn_test_x,
ytest=nn_test_y,ntree=300, keep.forest = TRUE)
nn_rf_predicted_class <- nn_rf_model$test$predicted
nn_rf_error <- table(actual = nn_test_y, predicted = nn_rf_predicted_class)
nn_rf_misclass_rate <- 1-sum(diag(nn_rf_error))/sum(nn_rf_error)
nn_rf_auc <- auc(roc(nn_rf_predicted_class,nn_test_y))
varImpPlot(nn_rf_model, sort = T)
n=20
N = nrow(data)
log_misclass_rate <- vector(mode = "numeric", length = n)
rf_misclass_rate <- vector(mode = "numeric", length = n)
log_auc <- vector(mode = "numeric", length = n)
rf_auc <- vector(mode = "numeric", length = n)
for (i in 1:n){
set.seed(i)
index <- sample(1:N, size = N*.7, replace = F)
train_x <- data[index, 1:10]
test_x <- data[-index, 1:10]
train_y <- data[index, 11]
test_y <- data[-index, 11]
train <- data[index,]
test <- data[-index,]
logitmodel <- glm(stroke ~., family = binomial(link = logit), data = train)
pred_logitmod <- predict(logitmodel, newdata = test, type = "response")
log_predicted_class <- ifelse(pred_logitmod > 0.5, 1, 0)
log_predicted_class <- factor(log_predicted_class, levels = c(0, 1))
log_error <- table(actual = test_y, predicted = log_predicted_class)
log_misclass_rate[i] <- 1-sum(diag(log_error))/sum(log_error)
rf_model <- randomForest(stroke~.,data = train, xtest = test_x,
ytest=test_y,ntree=300, keep.forest = TRUE)
rf_predicted_class <- rf_model$test$predicted
rf_error <- table(actual = test_y, predicted = rf_predicted_class)
rf_misclass_rate[i] <- 1-sum(diag(rf_error))/sum(rf_error)
log_auc[i] <- auc(roc(log_predicted_class, test_y))
rf_auc[i] <- auc(roc(rf_predicted_class,test_y))
}
results_misclass = data.frame(Log_Error = log_misclass_rate, RF_Error = rf_misclass_rate)
results_auc = data.frame(Log_AUC = log_auc, RF_AUC = rf_auc)
summary_results_misclass=describe(results_misclass)
summary_results_auc = describe(results_auc)
View(summary_results_auc)
View(summary_results_auc)
!duplicated(dmn2)
data.frame(!duplicated(dmn2))
View(data_frame)
k =data.frame(!duplicated(dmn2))
View(k)
k[k$X.duplicated.dmn2.=="FALSE",]
k =data.frame(duplicated(dmn2))
df <- dmn2[c(1:407,3175:3246), ]
d <- rbind(df,dmn)
nn = nrow(d)
set.seed(1)
index_nn <- sample(1:nn, size = nn*.7, replace = F)
nn_train_x <- d[index_nn, 2:11]
nn_test_x <- d[-index_nn, 2:11]
nn_train_y <- d[index_nn, 1]
nn_test_y <- d[-index_nn, 1]
nn_train <- d[index_nn, 1:11]
nn_test <- d[-index_nn, 1:11]
nn_log <- glm(stroke ~., family = binomial(link = logit), data = nn_train)
summary(nn_log)
nn_pred_logitmod <- predict(nn_log, newdata = nn_test, type = "response")
nn_log_predicted_class <- ifelse(nn_pred_logitmod > 0.5, 1, 0)
nn_log_predicted_class <- factor(nn_log_predicted_class, levels = c(0, 1))
nn_log_error <- table(actual = nn_test_y, predicted = nn_log_predicted_class)
nn_log_misclass_rate <- 1-sum(diag(nn_log_error))/sum(nn_log_error)
nn_log_auc <- auc(roc(nn_log_predicted_class, nn_test_y))
nn_rf_model <- randomForest(stroke~.,data = nn_train, xtest = nn_test_x,
ytest=nn_test_y,ntree=300, keep.forest = TRUE)
nn_rf_predicted_class <- nn_rf_model$test$predicted
nn_rf_error <- table(actual = nn_test_y, predicted = nn_rf_predicted_class)
nn_rf_misclass_rate <- 1-sum(diag(nn_rf_error))/sum(nn_rf_error)
nn_rf_auc <- auc(roc(nn_rf_predicted_class,nn_test_y))
data_match_nn <- match.data(match_nn)
data_match_nn <- data_match_nn[, c("stroke", setdiff(names(data_match_nn), "stroke"))]
dmn <- data_match_nn[,1:11]
dmn2 <- rbind(dmn,data)
num_replicated_rows <- sum(duplicated(dmn2))
k =data.frame(duplicated(dmn2))
df <- dmn2[1:407, ]
d <- rbind(df,dmn)
nn = nrow(d)
set.seed(1)
index_nn <- sample(1:nn, size = nn*.7, replace = F)
nn_train_x <- d[index_nn, 2:11]
nn_test_x <- d[-index_nn, 2:11]
nn_train_y <- d[index_nn, 1]
nn_test_y <- d[-index_nn, 1]
nn_train <- d[index_nn, 1:11]
nn_test <- d[-index_nn, 1:11]
nn_log <- glm(stroke ~., family = binomial(link = logit), data = nn_train)
summary(nn_log)
#nn_test$subclass <- factor(nn_test$subclass, levels = levels(nn_log$subclass))
nn_pred_logitmod <- predict(nn_log, newdata = nn_test, type = "response")
nn_log_predicted_class <- ifelse(nn_pred_logitmod > 0.5, 1, 0)
nn_log_predicted_class <- factor(nn_log_predicted_class, levels = c(0, 1))
nn_log_error <- table(actual = nn_test_y, predicted = nn_log_predicted_class)
nn_log_misclass_rate <- 1-sum(diag(nn_log_error))/sum(nn_log_error)
nn_log_auc <- auc(roc(nn_log_predicted_class, nn_test_y))
nn_rf_model <- randomForest(stroke~.,data = nn_train, xtest = nn_test_x,
ytest=nn_test_y,ntree=300, keep.forest = TRUE)
nn_rf_predicted_class <- nn_rf_model$test$predicted
nn_rf_error <- table(actual = nn_test_y, predicted = nn_rf_predicted_class)
nn_rf_misclass_rate <- 1-sum(diag(nn_rf_error))/sum(nn_rf_error)
nn_rf_auc <- auc(roc(nn_rf_predicted_class,nn_test_y))
varImpPlot(nn_rf_model, sort = T)
[nn_rf_predicted_class = "0"]
nn_rf_predicted_class[nn_rf_predicted_class = "0"]
length(nn_rf_predicted_class[nn_rf_predicted_class = "0"])
view(nn_rf_predicted_class)
data_match_nn <- match.data(match_nn)
data_match_nn <- data_match_nn[, c("stroke", setdiff(names(data_match_nn), "stroke"))]
dmn <- data_match_nn[,1:11]
dmn2 <- rbind(dmn,data)
num_replicated_rows <- sum(duplicated(dmn2))
k =data.frame(duplicated(dmn2))
df <- dmn2[1:407, ]
d <- rbind(df,dmn)
n=20
nn = nrow(d)
nn_log_misclass_rate <- vector(mode = "numeric", length = n)
nn_rf_misclass_rate <- vector(mode = "numeric", length = n)
nn_log_auc <- vector(mode = "numeric", length = n)
nn_rf_auc <- vector(mode = "numeric", length = n)
for (i in 1:n){
set.seed(i)
index_nn <- sample(1:nn, size = nn*.7, replace = F)
nn_train_x <- d[index_nn, 2:11]
nn_test_x <- d[-index_nn, 2:11]
nn_train_y <- d[index_nn, 1]
nn_test_y <- d[-index_nn, 1]
nn_train <- d[index_nn, 1:11]
nn_test <- d[-index_nn, 1:11]
nn_log <- glm(stroke ~., family = binomial(link = logit), data = nn_train)
summary(nn_log)
#nn_test$subclass <- factor(nn_test$subclass, levels = levels(nn_log$subclass))
nn_pred_logitmod <- predict(nn_log, newdata = nn_test, type = "response")
nn_log_predicted_class <- ifelse(nn_pred_logitmod > 0.5, 1, 0)
nn_log_predicted_class <- factor(nn_log_predicted_class, levels = c(0, 1))
nn_log_error <- table(actual = nn_test_y, predicted = nn_log_predicted_class)
nn_log_misclass_rate[i] <- 1-sum(diag(nn_log_error))/sum(nn_log_error)
nn_log_auc[i] <- auc(roc(nn_log_predicted_class, nn_test_y))
nn_rf_model <- randomForest(stroke~.,data = nn_train, xtest = nn_test_x,
ytest=nn_test_y,ntree=300, keep.forest = TRUE)
nn_rf_predicted_class <- nn_rf_model$test$predicted
nn_rf_error <- table(actual = nn_test_y, predicted = nn_rf_predicted_class)
nn_rf_misclass_rate[i] <- 1-sum(diag(nn_rf_error))/sum(nn_rf_error)
nn_rf_auc[i] <- auc(roc(nn_rf_predicted_class,nn_test_y))
}
us_stroke = 795000/332915073
pred_logitmod <- predict(logitmodel, newdata = test, type = "response")
log_sorted_indices <- order(-pred_logitmod)
us_stroke = 795000/332915073
prevelance = round((nrow(test))*us_stroke)
log_top_prob <- pred_logitmod[log_sorted_indices[1:prevelance]]
log_top_rows <- test[log_sorted_indices[1:prevelance], ] #top rows in the test set that have highest probability of getting stroke                                                              based on LG predictions
l = nrow(log_top_rows)
rf_prob <- data.frame(rf_model$test$votes)
rf_prob <- rf_prob$X1
rf_sorted_indices <- order(-rf_prob)
rf_top_prob <- rf_prob[rf_sorted_indices[1:prevelance]]
rf_model <- randomForest(stroke~.,data = train, xtest = test_x,
ytest=test_y,ntree=300, keep.forest = TRUE)
rf_prob <- data.frame(rf_model$test$votes)
rf_prob <- rf_prob$X1
rf_sorted_indices <- order(-rf_prob)
rf_top_prob <- rf_prob[rf_sorted_indices[1:prevelance]]
rf_stroke_pred <- sum(rf_predicted_class == 1)
rf_prev_comparison = c(rf_stroke_pred,prevelance)
log_stroke_pred <- sum(log_predicted_class == 1)
log_prev_comparison = c(log_stroke_pred, prevelance)
library(tidyr)
library(dplyr)
library(boot)
library(ROSE)
library(randomForest)
library(caret)
library(e1071)
library(pROC)
library(MLmetrics)
library(ROCR)
library(ROSE)
library(ggplot2)
detach("package:AUC", unload = TRUE)
rm(list=ls())
healthcare <- read.csv("../Data/Raw/healthcare-dataset-stroke-data.csv",sep=",")
healthcare <- read.csv("../Data/Raw/healthcare-dataset-stroke-data.csv")
setwd("~/EXST 7142/EXST 7142 Midterm Project")
healthcare <- read.csv("../Data/Raw/healthcare-dataset-stroke-data.csv")
